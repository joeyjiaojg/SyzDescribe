# Copyright 2018 syzkaller project authors. All rights reserved.
# Use of this source code is governed by Apache 2 LICENSE that can be found in the LICENSE file.

# Code generated by SyzDescribe. DO NOT EDIT.
# Code generated from linux v5.12

meta arches["amd64"]

# driver found at module init function mon_init() in https://elixir.bootlin.com/linux/v5.12/source/drivers/usb/mon/mon_main.c#L350
# call chain: 
# 00: https://elixir.bootlin.com/linux/v5.12/source/drivers/usb/mon/mon_main.c#L357
# 01: https://elixir.bootlin.com/linux/v5.12/source/drivers/usb/mon/mon_bin.c#L1388

# syscalls handler structure in https://elixir.bootlin.com/linux/v5.12/source/drivers/usb/mon/mon_bin.c#L1388
# find handler ioctl: mon_bin_ioctl
# find handler open: mon_bin_open
# find handler read: mon_bin_read

resource fd_5394562307236966240_fd[fd]

# device file name in https://elixir.bootlin.com/linux/v5.12/source/drivers/usb/core/endpoint.c#L194
openat$syz_describe_5394562307236966240_open_0(fd const[AT_FDCWD], file ptr[in, string["/dev/ep_2x"]], flags flags[open_flags], mode const[0]) fd_5394562307236966240_fd
# device file name in https://elixir.bootlin.com/linux/v5.12/source/drivers/usb/mon/mon_bin.c#L1359
syz_open_dev$syz_describe_5394562307236966240_open_1(dev ptr[in, string["/dev/usbmon#"]], id intptr, flags flags[open_flags]) fd_5394562307236966240_fd

ioctl$syz_describe_5394562307236966240_0(fd fd_5394562307236966240_fd, cmd const[0], arg ptr[in, array[int8]])
ioctl$syz_describe_5394562307236966240_37377(fd fd_5394562307236966240_fd, cmd const[37377], arg ptr[in, array[int8]])
ioctl$syz_describe_5394562307236966240_37380_0(fd fd_5394562307236966240_fd, cmd const[37380], arg ptr[in, struct_mon_bin_get_5394562307236966240])
ioctl$syz_describe_5394562307236966240_37380_1(fd fd_5394562307236966240_fd, cmd const[37380], arg ptr[in, struct_mon_bin_mfetch_5394562307236966240])
ioctl$syz_describe_5394562307236966240_37380_2(fd fd_5394562307236966240_fd, cmd const[37380], arg ptr[out, struct_mon_bin_hdr_5394562307236966240])
ioctl$syz_describe_5394562307236966240_37381(fd fd_5394562307236966240_fd, cmd const[37381], arg ptr[in, array[int8]])
ioctl$syz_describe_5394562307236966240_37384(fd fd_5394562307236966240_fd, cmd const[37384], arg ptr[in, array[int8]])
ioctl$syz_describe_5394562307236966240_1075352070_0(fd fd_5394562307236966240_fd, cmd const[1075352070], arg ptr[in, struct_mon_bin_get_5394562307236966240])
ioctl$syz_describe_5394562307236966240_1075352070_1(fd fd_5394562307236966240_fd, cmd const[1075352070], arg ptr[out, struct_mon_bin_hdr_5394562307236966240])
ioctl$syz_describe_5394562307236966240_1075352074_0(fd fd_5394562307236966240_fd, cmd const[1075352074], arg ptr[in, struct_mon_bin_get_5394562307236966240])
ioctl$syz_describe_5394562307236966240_1075352074_1(fd fd_5394562307236966240_fd, cmd const[1075352074], arg ptr[out, struct_mon_bin_hdr_5394562307236966240])
ioctl$syz_describe_5394562307236966240_2148045315(fd fd_5394562307236966240_fd, cmd const[2148045315], arg ptr[in, array[int8]])
ioctl$syz_describe_5394562307236966240_3222311431_0(fd fd_5394562307236966240_fd, cmd const[3222311431], arg ptr[in, struct_mon_bin_mfetch_5394562307236966240])

struct_util_est_5394562307236966240 {
    field_0    int32
    field_1    int32
}
struct_mon_bin_mfetch_5394562307236966240 {
    field_0    ptr[in, int32]
    field_1    int32
    field_2    int32
}
union_anon_81_3786_5394562307236966240 {
    field_0    struct_util_est_5394562307236966240
}
struct_mon_bin_hdr_5394562307236966240 {
    field_0    int64
    field_1    int8
    field_2    int8
    field_3    int8
    field_4    int8
    field_5    int16
    field_6    int8
    field_7    int8
    field_8    int64
    field_9    int32
    field_10    int32
    field_11    int32
    field_12    int32
    field_13    union_anon_81_3786_5394562307236966240
    field_14    int32
    field_15    int32
    field_16    int32
    field_17    int32
}
struct_mon_bin_get_5394562307236966240 {
    field_0    ptr[in, struct_mon_bin_hdr_5394562307236966240]
    field_1    ptr[in, int8]
    field_2    int64
}
